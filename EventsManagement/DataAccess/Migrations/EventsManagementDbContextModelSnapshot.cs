// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(EventsManagementDbContext))]
    partial class EventsManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Phone");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ClientStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClientStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Current client status is Available.",
                            Name = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Current client status is Due.",
                            Name = "Due"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Current client status is Canceled.",
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("EndTime");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("StartTime");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Birthday event type description.",
                            IsEnabled = true,
                            Name = "Birthday"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wedding event type description.",
                            IsEnabled = true,
                            Name = "Wedding"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Conference event type description.",
                            IsEnabled = true,
                            Name = "Conference"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Training event type description.",
                            IsEnabled = true,
                            Name = "Training"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Furniture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Furnitures", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Wooden table with 4 chairs",
                            IsReserved = false,
                            Name = "Table",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Leather sofa with 3 seats",
                            IsReserved = false,
                            Name = "Sofa",
                            Price = 500.00m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comfortable armchair for living room",
                            IsReserved = false,
                            Name = "Armchair",
                            Price = 250.00m
                        },
                        new
                        {
                            Id = 4,
                            Description = "King size bed with memory foam mattress",
                            IsReserved = false,
                            Name = "Bed",
                            Price = 800.00m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Wooden dresser with 6 drawers",
                            IsReserved = false,
                            Name = "Dresser",
                            Price = 300.00m
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EventId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ReservationFurniture", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("FurnitureId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId", "FurnitureId");

                    b.HasIndex("FurnitureId");

                    b.ToTable("ReservationFurniture", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Client", b =>
                {
                    b.HasOne("DataAccess.Models.ClientStatus", "Status")
                        .WithMany("Clients")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DataAccess.Models.Event", b =>
                {
                    b.HasOne("DataAccess.Models.EventType", "Type")
                        .WithMany("Events")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DataAccess.Models.Reservation", b =>
                {
                    b.HasOne("DataAccess.Models.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Event", "Event")
                        .WithMany("Reservations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DataAccess.Models.ReservationFurniture", b =>
                {
                    b.HasOne("DataAccess.Models.Furniture", "Furniture")
                        .WithMany("ReservationsFurnitures")
                        .HasForeignKey("FurnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Reservation", "Reservation")
                        .WithMany("ReservationsFurnitures")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Furniture");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("DataAccess.Models.Client", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("DataAccess.Models.ClientStatus", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("DataAccess.Models.Event", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("DataAccess.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("DataAccess.Models.Furniture", b =>
                {
                    b.Navigation("ReservationsFurnitures");
                });

            modelBuilder.Entity("DataAccess.Models.Reservation", b =>
                {
                    b.Navigation("ReservationsFurnitures");
                });
#pragma warning restore 612, 618
        }
    }
}
